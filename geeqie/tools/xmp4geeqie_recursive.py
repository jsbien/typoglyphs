import os
import subprocess
import sys
import hashlib
import json

SCRIPT_VERSION = "2.0"

TIFF_TAGS = [
    "256", "257", "258", "259", "262", "270", "271", "272", "274", "277", "282", "283", "284", "296",
    "301", "305", "306", "315", "318", "319", "529", "530", "531", "532", "18246", "33432"
]
EXIF_TAGS = [
    "36864", "40960", "40961", "37121", "37122", "40962", "40963", "37510", "40964", "36867", "36868",
    "33434", "33437", "34850", "34852", "34855", "34856", "37377", "37378", "37379", "37380", "37381",
    "37382", "37383", "37384", "37385", "37386", "37396", "41483", "41484", "41486", "41487", "41488",
    "41492", "41493", "41495", "41728", "41729", "41730", "41985", "41986", "41987", "41988", "41989",
    "41990", "41991", "41992", "41993", "41994", "41995", "41996", "42016"
]

def extract_exif_binary(image_path, tag_list):
    try:
        result = subprocess.run(
            ["exiftool", "-b", "-j"] + [f"-{tag}" for tag in tag_list] + [image_path],
            capture_output=True, text=True, check=True
        )
        exif_data = json.loads(result.stdout)[0]

        tag_values = []
        for tag in tag_list:
            value = exif_data.get(tag, None)
            if value is not None:
                tag_values.append(value.encode() if isinstance(value, str) else bytes(value))
            else:
                tag_values.append(b"")
        return tag_values
    except (subprocess.CalledProcessError, IndexError, json.JSONDecodeError):
        return [b""] * len(tag_list)

def compute_native_digest(image_path, tiff_only=False):
    tag_list = TIFF_TAGS if tiff_only else EXIF_TAGS
    tag_values = extract_exif_binary(image_path, tag_list)
    md5_hash = hashlib.md5(b"".join(tag_values)).hexdigest().upper()
    return f"{','.join(tag_list)};{md5_hash}" if tag_list else f";{md5_hash}"

def generate_xmp_files(image_dir):
    if not os.path.exists(image_dir):
        print(f"Error: Directory {image_dir} does not exist.")
        sys.exit(1)

    image_count = 0

    for root, _, files in os.walk(image_dir, followlinks=True):
        for filename in files:
            if filename.lower().endswith(".png"):
                image_path = os.path.join(root, filename)
                xmp_path = f"{image_path}.gq.xmp"

                if os.path.exists(xmp_path):
                    print(f"‚ö†Ô∏è  {xmp_path} already exists ‚Äî overwriting.")
                    os.remove(xmp_path)

                tiff_digest = compute_native_digest(image_path, tiff_only=True)
                exif_digest = compute_native_digest(image_path, tiff_only=False)

                command = [
                    "exiftool",
                    "-XMP:CreateDate=now",
                    "-XMP:Rating=1",
                    f"-XMP:Instructions=Geeqie XMP generated by xmp4geeqie v{SCRIPT_VERSION}",
                    f"-XMP-tiff:NativeDigest={tiff_digest}",
                    f"-XMP-exif:NativeDigest={exif_digest}",
                    "-overwrite_original",
                    xmp_path
                ]

                try:
                    subprocess.run(command, check=True)
                    print(f"‚úÖ Created: {xmp_path}")
                    image_count += 1
                except subprocess.CalledProcessError as e:
                    print(f"‚ùå Error processing {image_path}: {e}")

    print(f"\nüßæ Total XMP files created: {image_count}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python xmp4geeqie.py <image_directory>")
        sys.exit(1)

    image_directory = sys.argv[1]
    generate_xmp_files(image_directory)
